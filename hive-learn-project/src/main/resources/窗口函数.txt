https://www.bilibili.com/video/BV1Ff4y1S7qu?p=2
jianshu.com/p/3f3cf58472ca 这个件数文章中有错误
1. UNBOUNDED：无限制 而不是起点
2. 练习二中查询前20%时间的订单信息其实查询的是消费金额最低的前20%
窗口函数和分析函数
    窗口函数: over() 才是窗口函数
    分析函数: sum() avg() row_number

当然我们一般需要的是 分析函数搭配窗口函数一起使用完成数分析任务

一. Hive 窗口函数语法
之前说了 avg() sum() max() min() 都是分析函数,over() 才是窗口函数,
首先看 over() 窗口函数的语法结构以及常与 over() 配合使用的分析函数
我们在使用窗口函数时, over() 函数中的这三个函数可以组合使用也可以不适用。
over() 函数中如果不适用这三个函数, 窗口大小是针对查询产生的所有数据,
如果指定了分区, 窗口大小事针对每个分区的数据。
1. over() 窗口函数的语法结构
   分析函数() over(partition by 列名 order by 列名 rows between 开始位置 and 结束位置)
   over() 函数中包括三个函数:
   1) 分区 partition by 列名
      可以理解为 group by 分组。
      over(partition by 列名) 搭配分析函数时, 分析函数按照分组进行计算。
   2) 排序 order by 列名
   3) 开窗(指定窗口范围) rows between 开始位置 and 结束位置
      是指定窗口范围，比如第一行到当前行。而这个范围是随着数据变化的。
      over(rows between 开始位置 and 结束位置)搭配分析函数时，分析函数按照这个范围进行计算的。
      窗口范围说明：
      我们常使用的窗口范围是ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW(表示从起点到当前行),
      常用该窗口来计算累加。
      ------------------------------------------------------------------------
      PRECEDING：往前
      FOLLOWING：往后
      CURRENT ROW：当前行
      UNBOUNDED：无限制（一般结合PRECEDING，FOLLOWING使用）
      UNBOUNDED PRECEDING 表示该窗口最前面的行（起点）
      UNBOUNDED FOLLOWING：表示该窗口最后面的行（终点）
      比如说：
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW（表示从起点到当前行）
      ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING（表示往前2行到往后1行）
      ROWS BETWEEN 2 PRECEDING AND CURRENT ROW（表示往前2行到当前行）
      ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING（表示当前行到终点）

      RANGE between 表示当前值减去或加上的一个区间范围[]
      ------------------------------------------------------------------------
2. 与 over() 搭配使用的分析函数
   2.1 聚合类
       avg() sum() max() min()
   2.2 排名类
       row_number(): 按照值排序时产生一个自增编号，不会重复（如：1、2、3、4、5、6）
       rank()      : 按照值排序时产生一个自增编号，值相等时会重复，会产生空位（如：1、2、3、3、3、6）
       dense_rank(): 按照值排序时产生一个自增编号，值相等时会重复，不会产生空位（如：1、2、3、3、3、4）
   2.3 其他类
       lag(列名,往前的行数,[行数为null时的默认值，不指定为null])，可以计算用户上次购买时间，或者用户下次购买时间。
       lead(列名,往后的行数,[行数为null时的默认值，不指定为null])
       ntile(n) 把有序分区中的行分发到指定数据的组中，各个组有编号，编号从1开始，
                对于每一行，ntile返回此行所属的组的编号
3. 窗口函数总结
   其实窗口函数逻辑比较绕，我们可以把窗口理解为对表中的数据进行分组，排序等计算。
   要真正的理解HIVE窗口函数，还是要结合练习题才行。
   下面我们开始HIVE窗口函数的练习吧！
二. Hive 窗口函数三套练习题
练习一
  Hive之简单窗口函数 over()
  -------------------------------------------------------------
  1、使用 over() 函数进行数据统计, 统计每个用户及表中数据的总数
  2、求用户明细并统计每天的用户总数
  3、计算从第一天到现在的所有 score 大于80分的用户总数
  4、计算每个用户到当前日期分数大于80的天数
  -------------------------------------------------------------
  测试数据
  20191020,11111,85
  20191020,22222,83
  20191020,33333,86
  20191021,11111,87
  20191021,22222,65
  20191021,33333,98
  20191022,11111,67
  20191022,22222,34
  20191022,33333,88
  20191023,11111,99
  20191023,22222,33
  建表并导入数据:
create table test_window(
  logday string comment 'logday时间',
  userid string comment '用户ID',
  score int  comment '分数')
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';
#加载数据
load data local inpath '/kasa_data/test_data/test_window.txt' into table test_window;
1、使用 over() 函数进行数据统计, 统计每个用户及表中数据的总数
select *, count(userid)over() as total  from  test_window;
这里使用 over() 与 select count(*) 有相同的作用，
好处就是，在需要计算总数时不用再进行一次关联。
2、求用户明细并统计每天的用户总数
select *, count(userid)over(partition by logday) as total  from  test_window;
求每天的用户数可以使用select logday, count(userid) from recommend.test_window group by logday，
但是当想要得到 userid 信息时，这种用法的优势就很明显。
3、计算从第一天到现在的所有 score 大于80分的用户总数
select *, count(userid)over(order by logday rows between unbounded preceding and current row) as total
from  test_window where score > 80;
+---------------------+---------------------+--------------------+--------+--+
| test_window.logday  | test_window.userid  | test_window.score  | total  |
+---------------------+---------------------+--------------------+--------+--+
| 20191020            | 33333               | 86                 | 1      |
| 20191020            | 22222               | 83                 | 2      |
| 20191020            | 11111               | 85                 | 3      |
| 20191021            | 33333               | 98                 | 4      |
| 20191021            | 11111               | 87                 | 5      |
| 20191022            | 33333               | 88                 | 6      |
| 20191023            | 11111               | 99                 | 7      |
+---------------------+---------------------+--------------------+--------+--+
通过 over() 计算出按日期的累加值。
其实自己刚开始的时候就计算我思路是错了，我就想的是不用累加，
直接 select *,count(1)over()as total from test_window where score > 80;
这样计算，如果这样计算的话只会显示表中所有大于80的人数，如果我想看20191021或者看20191022的人数看不见。
+---------------------+---------------------+--------------------+--------+--+
| test_window.logday  | test_window.userid  | test_window.score  | total  |
+---------------------+---------------------+--------------------+--------+--+
| 20191023            | 11111               | 99                 | 7      |
| 20191022            | 33333               | 88                 | 7      |
| 20191021            | 33333               | 98                 | 7      |
| 20191021            | 11111               | 87                 | 7      |
| 20191020            | 33333               | 86                 | 7      |
| 20191020            | 22222               | 83                 | 7      |
| 20191020            | 11111               | 85                 | 7      |
+---------------------+---------------------+--------------------+--------+--+
4、计算每个用户到当前日期分数大于80的天数
select *, count(logday)over(partition by userid order by logday rows between unbounded preceding and current row) as total
from  test_window where score > 80;
+---------------------+---------------------+--------------------+--------+--+
| test_window.logday  | test_window.userid  | test_window.score  | total  |
+---------------------+---------------------+--------------------+--------+--+
| 20191020            | 11111               | 85                 | 1      |
| 20191021            | 11111               | 87                 | 2      |
| 20191023            | 11111               | 99                 | 3      |
| 20191020            | 22222               | 83                 | 1      |
| 20191020            | 33333               | 86                 | 1      |
| 20191021            | 33333               | 98                 | 2      |
| 20191022            | 33333               | 88                 | 3      |
+---------------------+---------------------+--------------------+--------+--+

练习二
测试数据
jack,2017-01-01,10
tony,2017-01-02,15
jack,2017-02-03,23
tony,2017-01-04,29
jack,2017-01-05,46
jack,2017-04-06,42
tony,2017-01-07,50
jack,2017-01-08,55
mart,2017-04-08,62
mart,2017-04-09,68
neil,2017-05-10,12
mart,2017-04-11,75
neil,2017-06-12,80
mart,2017-04-13,94
建表并加载数据
create table business
(
name string comment '姓名',
orderdate string comment '订单日期',
cost int  comment '消费金额'
)ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';
#加载数据
load  data local inpath "/kasa_data/test_data/business.txt" into table business;
1、查询在2017年4月份购买过的顾客及总人数
select
  *,
  count(1) over() as total
from
  business
where substr(orderdate,1,7) = '2017-04';
2、查询顾客的购买明细及月购买总额
select
  *,
  sum(cost) over(partition by name, substr(orderdate,1,7)) as total
from
  business;
3、查询顾客的购买明细及到目前为止每个顾客购买总金额
select
  *,
  sum(cost) over(partition by name order by orderdate rows between unbounded preceding and current row) as total
from
  business;
4、查询顾客上次的购买时间----lag()over()偏移量分析函数的运用
select
  *,
  lag(orderdate, 1) over(partition by name order by orderdate) as total
from
  business;
+----------------+---------------------+----------------+-------------+--+
| business.name  | business.orderdate  | business.cost  |    total    |
+----------------+---------------------+----------------+-------------+--+
| jack           | 2017-01-01          | 10             | NULL        |
| jack           | 2017-01-05          | 46             | 2017-01-01  |
| jack           | 2017-01-08          | 55             | 2017-01-05  |
| jack           | 2017-02-03          | 23             | 2017-01-08  |
| jack           | 2017-04-06          | 42             | 2017-02-03  |
| mart           | 2017-04-08          | 62             | NULL        |
| mart           | 2017-04-09          | 68             | 2017-04-08  |
| mart           | 2017-04-11          | 75             | 2017-04-09  |
| mart           | 2017-04-13          | 94             | 2017-04-11  |
| neil           | 2017-05-10          | 12             | NULL        |
| neil           | 2017-06-12          | 80             | 2017-05-10  |
| tony           | 2017-01-02          | 15             | NULL        |
| tony           | 2017-01-04          | 29             | 2017-01-02  |
| tony           | 2017-01-07          | 50             | 2017-01-04  |
+----------------+---------------------+----------------+-------------+--+
5、查询前20%时间的订单信息
select * from (
select
  *,
  ntile(5) over(order by orderdate) as sort_group_num
from
  business
) t where t.sort_group_num=1;
练习三
原始数据(学生成绩信息)
孙悟空 语文  87
孙悟空 数学  95
孙悟空 英语  68
大海  语文  94
大海  数学  56
大海  英语  84
宋宋  语文  64
宋宋  数学  86
宋宋  英语  84
婷婷  语文  65
婷婷  数学  85
婷婷  英语  78
建表并加载数据
create table score
(
name string,
subject string,
score int
) row format delimited fields terminated by "\t";
#加载数据
load data local inpath '/kasa_data/test_data/score.txt' into table score;
1、每门学科学生成绩排名(是否并列排名、空位排名三种实现)
select
  *,
  row_number() over (partition by subject order by score desc),
  rank() over (partition by subject order by score desc),
  dense_rank() over (partition by subject order by score desc)
from
  score;
+-------------+----------------+--------------+---------+---------+---------+--+
| score.name  | score.subject  | score.score  | _wcol0  | _wcol1  | _wcol2  |
+-------------+----------------+--------------+---------+---------+---------+--+
| 孙悟空      | 数学           | 95           | 1       | 1       | 1       |
| 宋宋        | 数学           | 86           | 2       | 2       | 2       |
| 婷婷        | 数学           | 85           | 3       | 3       | 3       |
| 大海        | 数学           | 56           | 4       | 4       | 4       |
| 宋宋        | 英语           | 84           | 1       | 1       | 1       | <=====
| 大海        | 英语           | 84           | 2       | 1       | 1       | <=====
| 婷婷        | 英语           | 78           | 3       | 3       | 2       | <=====
| 孙悟空      | 英语           | 68           | 4       | 4       | 3       | <=====
| 大海        | 语文           | 94           | 1       | 1       | 1       |
| 孙悟空      | 语文           | 87           | 2       | 2       | 2       |
| 婷婷        | 语文           | 65           | 3       | 3       | 3       |
| 宋宋        | 语文           | 64           | 4       | 4       | 4       |
+-------------+----------------+--------------+---------+---------+---------+--+
2、每门学科成绩排名top n的学生
在上述查询语句再嵌套一层即可.
select * from (
select
  *,
  row_number() over (partition by subject order by score desc) as rn
from
  score
)t where t.rn =1;
+---------+------------+----------+-------+--+
| t.name  | t.subject  | t.score  | t.rn  |
+---------+------------+----------+-------+--+
| 孙悟空  | 数学       | 95       | 1     |
| 宋宋    | 英语       | 84       | 1     |
| 大海    | 语文       | 94       | 1     |
+---------+------------+----------+-------+--+
3、查询学生明细+按照总成绩排名
select
  *,
  dense_rank() over (order by total_score desc) as rn
from (
    select
      *,
      sum(score) over (partition by name) as total_score
    from
      score
) t order by rn;
+---------+------------+----------+----------------+-----+--+
| t.name  | t.subject  | t.score  | t.total_score  | rn  |
+---------+------------+----------+----------------+-----+--+
| 孙悟空  | 英语       | 68       | 250            | 1   |
| 孙悟空  | 数学       | 95       | 250            | 1   |
| 孙悟空  | 语文       | 87       | 250            | 1   |
| 大海    | 英语       | 84       | 234            | 2   |
| 大海    | 数学       | 56       | 234            | 2   |
| 大海    | 语文       | 94       | 234            | 2   |
| 宋宋    | 英语       | 84       | 234            | 2   |
| 宋宋    | 数学       | 86       | 234            | 2   |
| 宋宋    | 语文       | 64       | 234            | 2   |
| 婷婷    | 英语       | 78       | 228            | 3   |
| 婷婷    | 数学       | 85       | 228            | 3   |
| 婷婷    | 语文       | 65       | 228            | 3   |
+---------+------------+----------+----------------+-----+--+
4、终极结果

SELECT
  name,
  concat_ws(',',collect_set(subject)) as subject,
  concat_ws(',',collect_list(cast(score as string))) as score
from
  score
group by
  name;
+-------+-----------------+-----------+--+
| name  |  subject        |   score   |
+-------+-----------------+-----------+--+
| 大海  | 语文,数学,英语  | 94,56,84  |
| 婷婷  | 语文,数学,英语  | 65,85,78  |
| 孙悟空| 语文,数学,英语  | 87,95,68  |
| 宋宋  | 语文,数学,英语  | 64,86,84  |
+-------+-----------------+-----------+--+

select split('语文,数学,英语',',') as subject_array, split('94,56,84',',') as score_array;
+-------------------------+-------------------+--+
|   subject_array         |    score_array    |
+-------------------------+-------------------+--+
| ["语文","数学","英语"]  | ["94","56","84"]  |
+-------------------------+-------------------+--+

select
  *,
  row_number() over (order by total_score desc) rn_1,
  rank() over (order by total_score desc) rn_2,
  dense_rank() over (order by total_score desc) rn_3
from (
    select
      name,
      score_array[0] chinese_score,
      score_array[1] math_score,
      score_array[2] english_score,
      score_array[0] + score_array[1] + score_array[2] total_score
    from (
        SELECT
          name,
          collect_list(cast(score as string)) as score_array
        from
          score
        group by
          name
    ) t
) t1 order by rn_1;
+----------+-------------------+----------------+-------------------+-----------------+-------+-------+-------+--+
| t1.name  | t1.chinese_score  | t1.math_score  | t1.english_score  | t1.total_score  | rn_1  | rn_2  | rn_3  |
+----------+-------------------+----------------+-------------------+-----------------+-------+-------+-------+--+
| 孙悟空   | 87                | 95             | 68                | 250.0           | 1     | 1     | 1     |
| 宋宋     | 64                | 86             | 84                | 234.0           | 2     | 2     | 2     |
| 大海     | 94                | 56             | 84                | 234.0           | 3     | 2     | 2     |
| 婷婷     | 65                | 85             | 78                | 228.0           | 4     | 4     | 3     |
+----------+-------------------+----------------+-------------------+-----------------+-------+-------+-------+--+

4、理想
如果每个科目的最高分都是一个同学, 那么这个总分第一是多高?

select
  sum(max_score) as if_max_total_score
from (
    select
      subject,
      max(score) as max_score
    from
      score
    group by
      subject
) t;
+---------------------+--+
| if_max_total_score  |
+---------------------+--+
| 273                 |
+---------------------+--+

5、待续
https://www.cnblogs.com/blogyuhan/p/9274784.html
列转行
行转列
重点理解下侧向视图函数
lateral view