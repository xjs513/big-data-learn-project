状态后端(State Backends)
- 每传入一条数据, 有状态的算子任务都会读取和更新状态
- 由于有效的状态访问对于处理数据的低延迟至关重要,
  因此每个并行任务都会在本地维护其状态,以确保快速的状态访问
- 状态的存储、访问和维护由一个可插拔的组件决定, 这就是状态后端
- 状态后端主要负责两件事:
  -- 本地的状态管理
  -- 将检查点(checkpoint)状态写入远程储存

选择一个状态后端
》 MemoryStateBackend 默认, 生产不用
   - 内存级的状态后端,会将键控状态作为内存中的对象管理,将他们存储在 TaskManager 的 JVM 堆上,
     而将 checkpoint 存储在 JobManager 的内存中
   - 特点: 快速、低延迟,但不稳定
》 FsStateBackend 状态规模不大,要求访问速度的时候
   - 将 checkpoint 保存到远程的持久化文件系统上,
     而对本地状态,和 MemoryStateBackend 一样, 存储在 TaskManager 的 JVM 堆上
   - 同时拥有内存级的本地访问速度和更好的容错保证
》 RocksDBStateBackend 状态规模大,不要求访问速度的时候  支持增量检查点
   - 将所有状态序列化后, 存入本地的 RocksDB中存储。


https://www.cnblogs.com/YuanWeiBlogger/p/12072782.html

从 Checkpoint 回复任务 指定checkpoint目录，重启应用

/data2/flink-1.10.0/bin/flink run hdfs://dev201:8020/flink/rocks_checkpoints/f9566b83fc07d71fc11522eb7ffee278/chk-8 \
 -yD yarn.containers.vcores=2 -m yarn-cluster -c StateWordCount wordcount.jar

/home/wangyanming/flink-1.10.0/bin/flink run -s hdfs://dev201:8020/flink/rocks_checkpoints/f9566b83fc07d71fc11522eb7ffee278/chk-8 \
-yD yarn.containers.vcores=2 -m yarn-cluster -c kasa.test.clickhouse.Kafka2ClickhouseDriver /home/songzhanliang/flink-learn-project-1.0-SNAPSHOT-jar-with-dependencies.jar

/home/songzhanliang/flink-1.11.2/bin/flink run -s hdfs://dev201:8020/flink/rocks_checkpoints/675477985706df0f1793c54377cbaa38/chk-49 \
 -m yarn-cluster -c kasa.test.clickhouse.Kafka2ClickhouseDriver /home/songzhanliang/flink-learn-project-1.0-SNAPSHOT-jar-with-dependencies.jar

bin/flink run -m yarn-cluster -c org.apache.flink.examples.java.wordcount.WordCount ./examples/batch/WordCount.jar

bin/flink run \
-yat kasa_type \
-ynm ttt        \
-m yarn-cluster  \
-c org.apache.flink.examples.java.wordcount.WordCount ./examples/batch/WordCount.jar


/home/wangyanming/flink-1.10.0/bin/flink run \
 -m yarn-cluster -c com.atguigu.apitest.SourceTest /home/songzhanliang/flink-learn-project-1.0-SNAPSHOT-jar-with-dependencies.jar
