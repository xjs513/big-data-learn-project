主要内容
- 状态一致性
- 一致性检查点 CheckPoints
- 端到端(end-to-end)状态一致性
- 端到端的精确一次(exactly-once)保证
- Flink + Kafka 的端到端状态一致性保证
----------------------------------
状态一致性的概念
- 有状态的流处理,内部算子都有自己的状态
- 对于流处理器内部来说,所谓的状态一致性,
  其实就是计算结果要保证正确
- 数据不多不少(不丢不重复)
- 故障恢复时,结果仍然正确
----------------------------------
状态一致性的分类(级别)
- AT-MOST-ONCE  其实就是没有保证 UDP
- AT-LEAST-ONCE 至少一次, 允许重复
- EXACTLY-ONCE  精确一次
----------------------------------
一致性检查点(Checkpoints)
- Flink 故障恢复的核心机制
- 有状态流应用的一致性检查点,其实就是所有任务的状态,
  在某个时间点的一份快照; 这个时间点,应该是所有任务
  都恰好处理完一个相同的输入数据的时候
----------------------------------
端到端的精确一次
- 内部保证  CheckPoints
- Source  数据可重放
- Sink 端  故障恢复时, 数据不会重复写入外部系统
  -- 幂等写入 Idempotent Write 数据恢复过程中数据有短暂异常
  -- 事务写入 Transactional Write
     1. 一系列操作要么一起成功,要么撤销更改
     2. 具有原子性

     实现思想: 构建的事务对应检查点, 等到检查点完成时, 写入所有对应结果
     实现方式:
        1. 预写日志(WAL)
            实时性降低
            有的外部系统不支持事务回滚 数据会重复
            GenericWriteAheadSink 模板类
        2. 两阶段提交(2PC)
            需要外部系统支持事务
            对于每个checkpoint，sink会启动一个事务
            并将所有接收的数据添加到事务里
            然后将这些数据写入到外部系统,但是并不提交他们, 只是预提交
            当 checkpoint 完成时, 提交事务
            这种方式真正实现了 exactly-once，
            需要一个提供事务支持的外部sink系统
            TwoPhaseCommitSinkFunction 接口
----------------------------------
2PC 对外部 sink 系统的要求
1. 外部 sink 系统必须提供事务支持, 或者 sink 任务必须能够模拟外部系统上的事务
2. 在 checkpoint 的间隔期间, 必须能够开启一个事务并接受数据写入
3. 在收到 checkpoint 完成的通知值钱啊, 事务必须是"待提交"状态。
   在故障恢复时, 可能耗时。如果此时 sink 系统关闭事务(例如超时), 那么未提交的数据会丢失
4. sink 任务必须能够在进程失败后恢复事务
5. 提交事务必须是幂等操作



该 66 了